[{"title":"使用Github Actions自动切换网站主题","path":"/2024/01/21/使用Github-Actions自动切换网站主题/","content":"> 现在网站用了三套主题，可喜可贺\n\n使用`Github Actions`实现每天自动切换网站的主题\n\n比如周一、三、五、七使用`theme-A`，二、四、六使用`theme-B`\n\n当然也可以添加`theme-C`、`theme-D`...\n\n\n\n1. 在`用户名.github.io`仓库中有两个文件夹`theme-A/`和`theme-B/`，用于存放两套主题的静态文件\n\n2. 在GitHub的 Settings -> Developer Settings -> Personal access tokens -> Tokens (classic) ([链接](https://github.com/settings/tokens/new))生成一个token，填写Note，勾选`repo`和`workflow`然后生成\n\n   ![token](/images/20240121/token.png)\n\n3. 在仓库的 Settings -> Secrets and variables -> Actions 添加刚才的token\n\n   ![secret](/images/20240121/secret.png)\n\n4. 在GitHub仓库中新建`.github/workflows`，新建一个`.yaml`文件，文件名随意；可以先点`Run workflow`把静态文件部署到`gh-pages`分支\n\n```yaml\nname: Update Blog\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 2 * * *\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Determine Deployment Directory\n        id: determine_directory\n        run: |\n          day_of_week=$(date +'%u')\n          if [ $((day_of_week % 2)) -eq 0 ]; then\n          echo \"name=directory::theme-B/\" >>$GITHUB_OUTPUT\n            else\n          echo \"name=directory::theme-A/\" >>$GITHUB_OUTPUT\n          fi\n          \n      - name: Get Current Time\n        id: current_time\n        run: echo \"name=time::$(date +'%Y-%m-%d %H:%M:%S')\" >>$GITHUB_OUTPUT\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3.9.3 # 使用部署到 GitHub pages 的 action\n        with:\n          publish_dir: ${{ steps.determine_directory.outputs.directory }} \n          github_token: ${{ secrets.DEPLOY_SECRET }} # secret 名\n          user_name: ${{ secrets.MY_USER_NAME }}\n          user_email: ${{ secrets.MY_USER_EMAIL }}\n          commit_message: \"Automated Deployment at ${{ steps.current_time.outputs.time }}\" # 在 commit message 中添加当前时间\n```\n\n5. 在仓库的 Settings -> Pages 设置`Build and deployment`的`Source`为`Deploy from a branch`，选择`gh-pages`分支，此时GitHub Pages将开始部署\n\n\n\n~~总之就挺神经病的~~\n\n~~写的方法我自己都看不懂~~\n\n~~感谢ChatGPT提供的GitHub Actions的源码~~","tags":["资源","Github"],"categories":["资源","hexo"]},{"title":"生日快乐","path":"/2023/12/15/生日快乐/","content":"生日快乐，我的15岁\n\n许个愿——当然不能说出来啦！\n\n`12/15/2023`\n\n![birthday](/images/myicon.jpg)","tags":["birthday"]},{"title":"姐姐♡喜欢","path":"/2023/11/26/姐姐♡喜欢/","content":"好喜欢姐姐  \n\n想给姐姐生孩子","tags":["日常","女生"],"categories":["日常"]},{"title":"Hexo Fluid添加一言及出处","path":"/2023/11/26/Hexo-Fluid添加一言及出处/","content":"原版只能显示`hitokoto`(正文)部分，不能显示`from`(出处)部分\n1. 修改`themes\\fluid\\layout\\_partials\\plugins\\typed.ejs`替换为如下内容  \n```js\n<% if(theme.fun_features.typing.enable && in_scope(theme.fun_features.typing.scope) && page.subtitle !== false) { %>\n  <%- js_ex(theme.static_prefix.typed, '/typed.min.js') %>\n  <script>\n    (function (window, document) {\n      var typing = Fluid.plugins.typing;\n      var subtitle = document.getElementById('subtitle');\n      if (!subtitle || !typing) {\n        return;\n      }\n      var text;\n      <% if (is_home() && theme.index.slogan.api && theme.index.slogan.api.enable) { %>\n        jQuery.ajax({\n          type: '<%= theme.index.slogan.api.method %>',\n          url: '<%- theme.index.slogan.api.url %>',\n          headers: <%- JSON.stringify(theme.index.slogan.api.headers || {}) %>,\n          dataType: 'json',\n          success: function(result) {\n            var apiText;\n            if (result) {\n              var keys = '<%= theme.index.slogan.api.keys %>'.split(',');\n              if (result instanceof Array) {\n                result = result[0];\n              }\n              for (const k of keys) {\n                var value = result[k];\n                if (typeof value === 'string') {\n                  apiText = value;\n                  break;\n                } else if (value instanceof Object) {\n                  result = value;\n                }\n              }\n              text = apiText ? (result.<%= theme.index.slogan.api.keys %> + ' - ' + result.<%= theme.index.slogan.api.keys2 %>) : (result.<%= theme.index.slogan.api.keys %> + ' - ' + result.<%= theme.index.slogan.api.keys2 %>);\n            }\n            typing(text);\n          },\n          error: function(xhr, status, error) {\n            if (error) {\n              console.error('Failed to request <%= theme.index.slogan.api.url %>:', error);\n            }\n            typing(text);\n          }\n        })\n      <% } else { %>\n        text = subtitle.getAttribute('data-typed-text');\n        typing(text);\n      <% } %>\n    })(window, document);\n  </script>\n<% } %>\n```\n2. 修改`_config.fluid.yml`  \n添加`keys2`用于控制出处的取值\n```yaml\n      # 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 {\"data\": {\"author\": \"fluid\", \"content\": \"An elegant theme\"}}, 则取值字段为 ['data', 'content']；如果返回是列表则自动选择第一项\n      # The value field of the string obtained from the response. For example, the response content is {\"data\": {\"author\": \"fluid\", \"content\": \"An elegant theme\"}}, the expected `keys: ['data','content']`; if the return is a list, the first item is automatically selected\n      keys: ['hitokoto']\n      keys2: ['from']\n```","tags":["hexo","fluid","资源"],"categories":["资源","hexo"]},{"title":"少女的人设","path":"/2023/11/05/少女的人设/","content":"- 姓名: 少女  \n- 性别: 女  \n- 年龄: 16  \n- 身高: 159.5cm  \n- 体重: <span class=\"heimu\">女孩子的体重是秘密!!</span>  \n- 胸围: 95D  \n- 生日: 2007.08.31  \n- 喜欢的人/物: 初音未来&&美少女&&Python  \n<div style=\"text-align:center;\"><p><del>才，才不是为了你才特意写的自我介绍啦</del></p><p><strong>世界第一可爱美少女</strong></p></div>","tags":["日常","女生","人设"],"categories":["日常"]},{"title":"想穿Lolita","path":"/2023/10/26/想穿Lolita/","content":"我想穿lolita  \n但是lolita好贵 买不起\n\n我不穿lolita也很可爱","tags":["日常","女生"],"categories":["日常"]},{"title":"谁能帮我找个女朋友","path":"/2023/10/14/谁能帮我找个女朋友/","content":"谁能帮我找个女朋友  \n要高中大姐姐","tags":["日常","女生"],"categories":["日常"]},{"title":"为Hexo-Fluid的文章设置网格背景","path":"/2023/10/14/为Hexo-Fluid的文章设置网格背景/","content":"效果图：\n![效果图](/img/20231014/xiaoguo.png)\n两种方法，推荐第一种\n\n## 使用自定义CSS实现  \n- ~~代码是从[Gridzzly.com](https://gridzzly.com)抄的~~  \n- 推荐为暗色模式进行适配 ~~不然根本看不清~~  \n1. 新建CSS文件(不要通过自定义CSS导入)\n```css\n#board {\n    width: 100%;\n    height: 100%;\n    background-image: url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%226mm%22%20height%3D%226mm%22%20viewPort%3D%220%200%205mm%205mm%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%3Cline%20x1%3D%220mm%22%20y1%3D%225mm%22%20x2%3D%226mm%22%20y2%3D%225mm%22%20stroke-width%3D%220.3mm%22%20stroke%3D%22%23d4d4d4%22%2F%3E%20%3Cline%20x1%3D%225mm%22%20y1%3D%220mm%22%20x2%3D%225mm%22%20y2%3D%226mm%22%20stroke-width%3D%220.3mm%22%20stroke%3D%22%23d4d4d4%22%2F%3E%20%3C%2Fsvg%3E\");\n    background-position: 2px 2px;\n}\n```\n\n2. 引入CSS  \n```html\n<link id=\"custom-css\" rel=\"stylesheet\" type=\"text/css\" href=\"/css/divback.css\">\n```\n建议通过Hexo注入器进行引入\n\n3. 修改`Blog\\themes\\fluid\\layout\\_partials\\header\\navigation.ejs` 目前是第62行，为了给a标签绑定`onclick=\"toggleCSS()\"`\n```html navigation.ejs\n<a class=\"nav-link\" target=\"_self\" href=\"javascript:;\" aria-label=\"Color Toggle\" onclick=\"toggleCSS()\">\n```\n\n4. 导入自定义js\n```javascript\nfunction toggleCSS() {\n      var linkElement = document.getElementById(\"custom-css\");\n      if (linkElement.disabled) {\n        linkElement.disabled = false; // 启用CSS文件\n      } else {\n        linkElement.disabled = true; // 禁用CSS文件\n      }\n    }\n```\n\n## 使用Pattern.css实现  \n1. 在`layout.ejs`引入`Pattern.css`\n```html\n<link href=\"https://unpkg.com/pattern.css\" rel=\"stylesheet\">\n```\n\n2. 将`layout.ejs`和`post.ejs`两个文件中的`<div id=\"board\"`(没有向右的尖括号)改为`<div id=\"board\" class=\"pattern-dots-xl\"`(以.pattern-dots-xl为例，可以自己修改class的内容)","tags":["hexo","技术"],"categories":["资源","hexo"]},{"title":"配置Hexo-Fluid及Valine时遇到的问题","path":"/2023/10/05/配置Hexo-Fluid及Valine时遇到的问题/","content":"一些小问题\n## 关于Hexo Fluid的评论\n因为出了一点Bug，本站的评论通过修改`Blog/themes/fluid/layout/post.ejs`实现。  \n将`post.ejs`中的`<%- inject_point('postComments') %>`替换为 你使用的评论系统 提供的html代码  \n以Utterance为例:\n```html\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"用户名/仓库地址\"\n        issue-term=\"pathname\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n\n## 关于网站图标\n在`_config.fluid.yml`设置没反应，手动将网页图标重命名为`favicon.ico`，复制到`public`文件夹下\n\n## 关于Valine\n测试时发现LeanCloud提供的域名会屏蔽中国大陆的访问...  \n绑定自己的域名后就能正常访问...  \n\n在LeanCloud的`设置-域名绑定`选项绑定自己的子域名，然后在子域名的DNS上设置`CNAME`记录，解析到LeanCloud提供的域名，之后配置Valine时,使用绑定的子域名  \n\n~~不想打字了~~","tags":["hexo","fluid","资源"],"categories":["资源","hexo"]},{"title":"魔改Hexo Fluid","path":"/2023/10/05/魔改Hexo-Fluid/","content":"整理一下本少女在使用hexo fluid时用到的代码  \n\n## 添加自定义字体\n\n1. 通过自定义CSS引入字体\n\n```css\n@font-face {\n  font-family: 'FontName';  /*换成你自己的字体名及路径*/\n  src: url('/font/font.ttf') format('truetype');\n  font-weight: normal;\n  font-style: normal;\n}\n```\n\n2. 修改`Blog/_config.fluid.yml`\n\n```yaml\nfont:\n  font_size: 18px   # 按需要自定义\n  font_family: FontName  # 换成你自己的字体名\n  letter_spacing: 0.02em\n  code_font_size: 85%\n```\n\n## 添加网页背景图片\n1. 使用自定义CSS实现  \n用上面的方法添加自定义CSS\n```css\nbody {\n  background: url(/img/background.jpg);  /*换成你自己的背景图*/\n  background-attachment: fixed;\n  background-size: cover;  \n}\n```\n可以使用图片的api，个人感觉会拖慢加载速度  \n\n## 复制变色\n自定义CSS添加以下内容  \n```css\n::selection {\n    color: #66ccff; /* 设置选中文字的颜色 */\n    background: transparent; /* 设置选中文字的背景为透明 */\n}\n```\n\n## Banner图随网页滑动变透明\n\nHexo Fluid，随着网页的滑动，Banner图会逐渐变透明  \n打字机也会变透明  \n\n自定义js\n```javascript\n// 获取图片元素\nvar image = document.getElementById(\"banner\");\nvar targetDistance = 695; // 设置滑动695px后完全透明\nwindow.addEventListener(\"scroll\", function() {\n  var scrollDistance = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n  var opacity = 1 - (scrollDistance / targetDistance);\n  if(opacity < 0) {\n    opacity = 0;\n  }\n  image.style.opacity = opacity.toString();\n});\n```\n或者根据滑动网页的百分比减少不透明度\n```javascript\nvar image = document.getElementById(\"banner\");\nvar pageHeight = document.body.scrollHeight - window.innerHeight;\nwindow.addEventListener(\"scroll\", function() {\n  var scrollDistance = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n  var opacity = 1 - (scrollDistance / pageHeight);\n  if(opacity < 0) {\n    opacity = 0;\n  } else if(opacity > 1) {\n    opacity = 1;\n  }\n  image.style.opacity = opacity.toString();\n});\n```\n设置banner的淡出样式\n```css\n#banner {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n```\n\n## 文章中代码的字体及背景色\n\n自定义CSS添加以下内容\n```css\n.markdown-body code {\n    tab-size: 4;\n    background-color: rgb(251 253 83 / 50%);\n    transition: background-color 0.2s ease-in-out;\n    font-family: \"FontName\";  /*改为你自己的字体名*/\n}\n```\n- `background-color`用于设置背景色\n- `font-family`用于设置字体\n\n## 滚动条\n\n自定义CSS\n\n``` css\n::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: #e58a8a;\n    background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent);\n    border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n    background-color: transparent;\n}\n\n::-moz-selection {\n    color: #fff;\n    background-color: #e58a8a;\n}\n```\n\n先写这些~","tags":["hexo","fluid","资源"],"categories":["资源","hexo"]},{"title":"我想变成女生","path":"/2023/10/05/我想变成女生/","content":"# 我想变成女生\n\n好想变成女生\n\n变成女生会很可爱\n\n为什么我不是女生，可恶","tags":["日常","女生"],"categories":["日常"]},{"title":"Hello, World!","path":"/2023/08/30/hello-world/","content":"# 初音ミク16岁生日快乐！！！\n# 同时纪念少女的小站正式建成  \n# 2023.08.31 00:00 (JST)\n\nHello, World!"},{"title":"about","path":"/about/index.html","content":"- 少女  \n- 永远16岁  \n- 主要性别: 女\n- miku的老婆\n\n目前初三 ~~明年就高一了~~  \n喜欢初音未来、Python娘、动漫及代码  \n~~周末小概率更新~~\n<div id=\"vcomments\">\n</div>\n<script src=\"/js/Valine.min.js\">\n</script>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: 'MMH0HmN9WNMhxXgccAiwt5qA-MdYXbMMI',\n        appKey: 'meCb4Dp0hSEmax5CgVfNrZST',\n        placeholder: '请主人留下评论喵~',\n        notify: false,\n        verify: false,\n        avatar: 'mp',\n        pageSize: 10,\n        recordIP: false,\n        path: window.location.pathname,\n        serverURLs: 'https://api.miku.run.place',\n    });\n</script>"}]