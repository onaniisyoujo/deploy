<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>少女</title><description>少女的Blog</description><link>https://onaniishoujo.github.io/</link><language>zh_CN</language><item><title>Deno Deploy的妙用</title><link>https://onaniishoujo.github.io/posts/deno-deploy%E7%9A%84%E5%A6%99%E7%94%A8/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/deno-deploy%E7%9A%84%E5%A6%99%E7%94%A8/</guid><pubDate>Sat, 09 Mar 2024 20:24:18 GMT</pubDate><content:encoded>&lt;h2&gt;搭建Hexo博客&lt;/h2&gt;
&lt;p&gt;默认分配一个&lt;code&gt;project_name.deno.dev&lt;/code&gt;域名，速度还可以&lt;/p&gt;
&lt;p&gt;类似Cloudflare Pages&lt;/p&gt;
&lt;p&gt;需要准备一个GitHub账号，使用GitHub登陆&lt;a href=&quot;https://dash.deno.com/signin&quot;&gt;Deno&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deno Deploy中新建一个&lt;code&gt;Project&lt;/code&gt;，选择&lt;code&gt;Create an empty project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果找不到&lt;code&gt;Create an empty project&lt;/code&gt;，这里有链接：&lt;a href=&quot;https://dash.deno.com/new&quot;&gt;New Project - Deploy (deno.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./denop.png&quot; alt=&quot;project&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在博客的GitHub仓库中新建一个workflow，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: Deploy
on:
  workflow_dispatch:
  push:
    branches: gh-pages  # 根据需要设置触发条件

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          ref: &apos;gh-pages&apos;  # 根据需要修改为你的分支名

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install deployctl
        run: &quot;deno install --allow-all --no-check -r -f https://deno.land/x/deploy/deployctl.ts&quot;

      - name: Upload to Deno Deploy
        env: 
          DENO_TOKEN: ${{ secrets.DENO_TOKEN }}  # 使用设置的secrets名
        run: &quot;DENO_DEPLOY_TOKEN=$DENO_TOKEN deployctl deploy --prod --project=&amp;lt;project_name&amp;gt; https://deno.land/std@0.208.0/http/file_server.ts&quot;  # 将&amp;lt;project_name&amp;gt;替换为你在Deno新建的项目名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href=&quot;https://dash.deno.com/account#access-tokens&quot;&gt;https://dash.deno.com/account#access-tokens&lt;/a&gt;生成一个Access Token，添加进博客GitHub仓库的secrets中，名字可以用上面的&lt;code&gt;DENO_TOKEN&lt;/code&gt;（也可以用别的名字）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;访问量统计&lt;/h2&gt;
&lt;p&gt;使用Deno KV实现了一个类似不蒜子计数的功能&lt;/p&gt;
&lt;h6&gt;Deno Deploy端的配置&lt;/h6&gt;
&lt;p&gt;需要确保Deno KV中已经有&lt;code&gt;user&lt;/code&gt;和&lt;code&gt;new&lt;/code&gt;两组数据，没有可以先创建出来&lt;/p&gt;
&lt;p&gt;新建一个Playground，代码如下（请替换&lt;code&gt;url_set&lt;/code&gt;的内容）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { Hash, encode } from &quot;https://deno.land/x/checksum@1.2.0/mod.ts&quot;;
const kv = await Deno.openKv();
const url_set = [&apos;这里替换为该Deploy项目的地址&apos;, &apos;后面这几个是你的网站地址(可以只填一个)&apos;, &apos;&apos;, &apos;&apos;]

Deno.serve(async (request: Request, info: Deno.ServeHandlerInfo) =&amp;gt; {
  if (request.url != url_set[0]+&apos;/&apos; &amp;amp;&amp;amp; request.url != url_set[0]) {
    return new Response(&apos;403 Forbidden&apos;,{status: 403});
  }
  var flag;
  for (const pair of request.headers.entries()) {
    if (pair[0] == &apos;referer&apos;) {
      for (const url of url_set) {
        if (pair[1].includes(url)) {
          var h = new Headers();
          h.append(&apos;Access-Control-Allow-Origin&apos;, url);
          flag = true;
          break;
        }
      }
    }
  }
  if (!flag) {
    return new Response(&apos;403 Forbidden&apos;,{status: 403});
  }

  await kv.atomic().sum([&quot;visitors&quot;], 1n).commit();
  const count = await kv.get([&quot;visitors&quot;]);

  const ip = info.remoteAddr.hostname;
  const ip_md5 = new Hash(&quot;md5&quot;).digest(encode(ip)).hex();

  const user_array = await kv.get([&quot;user&quot;]);
  if (user_array.value.indexOf(ip_md5) == -1) {
    const ex_array = user_array.value.concat(ip_md5)
    await kv.set([&quot;user&quot;], ex_array)
    await kv.atomic().sum([&quot;new&quot;], 1n).commit();
  }
  const pv = await kv.get([&quot;new&quot;]);

  const result = `\{&quot;uv&quot;: ${count.value}, &quot;pv&quot;:${pv.value}\}`;
  return new Response(result, {headers: h});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h6&gt;前端的配置&lt;/h6&gt;
&lt;p&gt;html部分：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;总访客&amp;lt;span id=&quot;counter_uv&quot;&amp;gt;&amp;lt;/span&amp;gt;人
总访问量&amp;lt;span id=&quot;counter_pv&quot;&amp;gt;&amp;lt;/span&amp;gt;次
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;js部分：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fetch(&apos;url&apos;) // 将url设置为你的Deno Deploy地址
    .then(response =&amp;gt; {
        return response.json()
    })
    .then(data =&amp;gt; {
        document.getElementById(&apos;counter_uv&apos;).innerHTML = data.uv
        document.getElementById(&apos;counter_pv&apos;).innerHTML = data.pv
    })
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Deno Deploy部署Artitalk_SafeMode</title><link>https://onaniishoujo.github.io/posts/deno-deploy%E9%83%A8%E7%BD%B2artitalk-safemode/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/deno-deploy%E9%83%A8%E7%BD%B2artitalk-safemode/</guid><pubDate>Sun, 16 Jun 2024 20:52:36 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://artitalk.js.org/&quot;&gt;Artitalk&lt;/a&gt;自带SafeMode，但是需要使用Cloudflare Workers，在某些地区不方便使用&lt;/p&gt;
&lt;p&gt;本人修改了原版的Workers脚本，并将其移植到了Deno Deploy&lt;/p&gt;
&lt;p&gt;需要设置的环境变量：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;APPID&lt;/code&gt;: 字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;APPKEY&lt;/code&gt;: 字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SERVERDOMAIN&lt;/code&gt;: 当前Deno Deploy的域名，不带&lt;code&gt;https://&lt;/code&gt;头&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ATCOMMENT&lt;/code&gt;: true或false&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CORS&lt;/code&gt;: url1,url2,url3 (url之间用半角逗号隔开 且没有空格)&lt;/p&gt;
&lt;p&gt;修改后的脚本如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async function handleRequest(request: Request): Promise&amp;lt;Response&amp;gt; {
    const AppId: string = Deno.env.get(&apos;APPID&apos;)
    const AppKey: string = Deno.env.get(&apos;APPKEY&apos;)
    const ServerDomain: string = Deno.env.get(&apos;SERVERDOMAIN&apos;)
    const atComment: Boolean = Deno.env.get(&apos;ATCOMMENT&apos;) == &apos;true&apos;
    const CORS: string[] = Deno.env.get(&apos;CORS&apos;).split(&apos;,&apos;)

    const url: URL = new URL(request.url)
    const urlObj: URL = new URL(url)
    const path: string = urlObj.href.substr(urlObj.origin.length)
    const classac: string = l(rp(path).split(&apos;/&apos;))

    if (AppId == &quot;&quot; || AppKey == &quot;&quot;) { return new Response(&apos;Artitalk-Safe异常: 您没有设定appid和appkey&apos;) }
    if (classac == &quot;atComment&quot; &amp;amp;&amp;amp; !atComment) { return new Response(&apos;{&quot;code&quot;:101,&quot;error&quot;:&quot;Artitalk-Safe: 评论功能未开启&quot;}&apos;, { headers: { &quot;content-type&quot;: &quot;application/json;charset=utf-8&quot; } }) }
    if (classac == &quot;_File&quot; || classac == &quot;_Followee&quot; || classac == &quot;_Follower&quot; || classac == &quot;_Installation&quot; || classac == &quot;_Role&quot;) { return new Response(&apos;{&quot;code&quot;:101,&quot;error&quot;:&quot;Artitalk-Safe: 操作是禁止的&quot;}&apos;, { headers: { &quot;content-type&quot;: &quot;application/json;charset=utf-8&quot; } }) }

    url.hostname = ServerDomain
    const reqHEDNew: Headers = new Headers(request.headers)
    if (reqHEDNew.get(&quot;X-LC-Id&quot;)) {
        reqHEDNew.set(&quot;X-LC-Id&quot;, AppId)
        reqHEDNew.set(&quot;X-LC-Key&quot;, AppKey)
    }
    if (reqHEDNew.get(&quot;x-lc-sign&quot;)) {
        reqHEDNew.delete(&quot;X-LC-Sign&quot;)
    }
    const reqNew: Request = new Request(request, { headers: reqHEDNew })
    const responsefetch: Response = await fetch(url.toString(), reqNew)
    const resHEDNew: Headers = new Headers(responsefetch.headers)
    
    var flag: Boolean = false
    for (let pair of request.headers.entries()) {
        if (pair[0] == &apos;referer&apos;) {
            for (let url of CORS) {
                if (pair[1].indexOf(url) != -1) {
                    resHEDNew.set(&quot;Access-Control-Allow-Origin&quot;, url.slice(0, -1))
                    flag = true
                    break
                }
            } break
        }
    }

    if (!flag){
        resHEDNew.delete(&quot;Access-Control-Allow-Origin&quot;)
    }

    const response: Response = new Response(responsefetch.body, { headers: resHEDNew })
    return response
}

function rp(p: string): string {
    return p.split(&quot;?&quot;)[0]
}

function l(p: string[]): string {
    return p[getJsonLength(p) - 1]
}

function getJsonLength(jsonData: string[]): number {
    var jsonLength = 0
    for (var _ in jsonData) {
        jsonLength++
    }
    return jsonLength
}

Deno.serve((req: Request) =&amp;gt; {
    return handleRequest(req)
});
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Hexo Fluid添加一言及出处</title><link>https://onaniishoujo.github.io/posts/hexo-fluid%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E5%8F%8A%E5%87%BA%E5%A4%84/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/hexo-fluid%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E5%8F%8A%E5%87%BA%E5%A4%84/</guid><pubDate>Sun, 26 Nov 2023 12:33:00 GMT</pubDate><content:encoded>&lt;p&gt;原版只能显示&lt;code&gt;hitokoto&lt;/code&gt;(正文)部分，不能显示&lt;code&gt;from&lt;/code&gt;(出处)部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改&lt;code&gt;themes\fluid\layout\_partials\plugins\typed.ejs&lt;/code&gt;替换为如下内容&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% if(theme.fun_features.typing.enable &amp;amp;&amp;amp; in_scope(theme.fun_features.typing.scope) &amp;amp;&amp;amp; page.subtitle !== false) { %&amp;gt;
  &amp;lt;%- js_ex(theme.static_prefix.typed, &apos;/typed.min.js&apos;) %&amp;gt;
  &amp;lt;script&amp;gt;
    (function (window, document) {
      var typing = Fluid.plugins.typing;
      var subtitle = document.getElementById(&apos;subtitle&apos;);
      if (!subtitle || !typing) {
        return;
      }
      var text;
      &amp;lt;% if (is_home() &amp;amp;&amp;amp; theme.index.slogan.api &amp;amp;&amp;amp; theme.index.slogan.api.enable) { %&amp;gt;
        jQuery.ajax({
          type: &apos;&amp;lt;%= theme.index.slogan.api.method %&amp;gt;&apos;,
          url: &apos;&amp;lt;%- theme.index.slogan.api.url %&amp;gt;&apos;,
          headers: &amp;lt;%- JSON.stringify(theme.index.slogan.api.headers || {}) %&amp;gt;,
          dataType: &apos;json&apos;,
          success: function(result) {
            var apiText;
            if (result) {
              var keys = &apos;&amp;lt;%= theme.index.slogan.api.keys %&amp;gt;&apos;.split(&apos;,&apos;);
              if (result instanceof Array) {
                result = result[0];
              }
              for (const k of keys) {
                var value = result[k];
                if (typeof value === &apos;string&apos;) {
                  apiText = value;
                  break;
                } else if (value instanceof Object) {
                  result = value;
                }
              }
              text = apiText ? (result.&amp;lt;%= theme.index.slogan.api.keys %&amp;gt; + &apos; - &apos; + result.&amp;lt;%= theme.index.slogan.api.keys2 %&amp;gt;) : (result.&amp;lt;%= theme.index.slogan.api.keys %&amp;gt; + &apos; - &apos; + result.&amp;lt;%= theme.index.slogan.api.keys2 %&amp;gt;);
            }
            typing(text);
          },
          error: function(xhr, status, error) {
            if (error) {
              console.error(&apos;Failed to request &amp;lt;%= theme.index.slogan.api.url %&amp;gt;:&apos;, error);
            }
            typing(text);
          }
        })
      &amp;lt;% } else { %&amp;gt;
        text = subtitle.getAttribute(&apos;data-typed-text&apos;);
        typing(text);
      &amp;lt;% } %&amp;gt;
    })(window, document);
  &amp;lt;/script&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;修改&lt;code&gt;_config.fluid.yml&lt;/code&gt;&lt;br /&gt;
添加&lt;code&gt;keys2&lt;/code&gt;用于控制出处的取值&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;      # 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 {&quot;data&quot;: {&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;}}, 则取值字段为 [&apos;data&apos;, &apos;content&apos;]；如果返回是列表则自动选择第一项
      # The value field of the string obtained from the response. For example, the response content is {&quot;data&quot;: {&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;}}, the expected `keys: [&apos;data&apos;,&apos;content&apos;]`; if the return is a list, the first item is automatically selected
      keys: [&apos;hitokoto&apos;]
      keys2: [&apos;from&apos;]
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Hexo ParticleX及Diaspora主题使用Artitalk</title><link>https://onaniishoujo.github.io/posts/hexo-particlex%E5%8F%8Adiaspora%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8artitalk/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/hexo-particlex%E5%8F%8Adiaspora%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8artitalk/</guid><pubDate>Fri, 02 Feb 2024 23:06:30 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code&gt;Hexo Particle&lt;/code&gt;X和&lt;code&gt;Hexo Diaspora&lt;/code&gt;主题，如果使用&lt;code&gt;hexo new page &amp;lt;页面名&amp;gt; &lt;/code&gt;，并在生成的&lt;code&gt;.md&lt;/code&gt;文件配置Artitalk的代码，会出现奇怪的Bug&lt;/p&gt;
&lt;p&gt;请教ChatGPT之后用下面的代码可以使用Artitalk&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
(function() {
  document.addEventListener(&apos;DOMContentLoaded&apos;, function() {
    // 找到class为content的div标签
    var contentDiv = document.querySelector(&apos;.content&apos;);

    // 动态创建div标签用于Artitalk
    var artitalkDiv = document.createElement(&apos;div&apos;);
    artitalkDiv.id = &apos;artitalk_main&apos;; // 设置ID为artitalk_main
    contentDiv.appendChild(artitalkDiv); // 将新创建的div添加到class为content的div内

    // 创建script标签
    var script = document.createElement(&apos;script&apos;);
    script.type = &apos;text/javascript&apos;;
    script.src = &apos;https://cdn.staticfile.org/artitalk/3.3.4/js/artitalk.js&apos;;

    // 当脚本加载完成后初始化Artitalk
    script.onload = function() {
      // 确保Artitalk已加载
      if (typeof Artitalk !== &apos;undefined&apos;) {
        new Artitalk({
          appId: &apos;你的appId&apos;,
          appKey: &apos;你的appKey&apos;,
          serverURL: &apos;你的serverURL&apos;,
          color1: &apos;#8DC9D3&apos;,
          color2: &apos;#FFBFD7&apos;,
        });
      }
    };

    // 将script标签添加到body中（也可以根据需要添加到head中）
    document.body.appendChild(script);
  });
})();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把这些添加进生成的&lt;code&gt;index.md&lt;/code&gt;文件中&lt;/p&gt;
&lt;p&gt;这里是把Artitalk添加进&lt;code&gt;&amp;lt;div class=&quot;content&quot;&amp;gt;&lt;/code&gt;内，可以根据需要改变class名&lt;/p&gt;
&lt;p&gt;在Diaspora主题上有Bug，需要刷新页面才能显示Artitalk，暂时没想到怎么解决&lt;/p&gt;
</content:encoded></item><item><title>Hexo ParticleX添加Valine评论</title><link>https://onaniishoujo.github.io/posts/hexo-particlex%E6%B7%BB%E5%8A%A0valine%E8%AF%84%E8%AE%BA/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/hexo-particlex%E6%B7%BB%E5%8A%A0valine%E8%AF%84%E8%AE%BA/</guid><pubDate>Sun, 21 Jan 2024 21:35:28 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;themes\particlex\layout\comment.ejs&lt;/code&gt;的最后添加以下代码：(可使用CDN)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% if (theme.valine.enable) { %&amp;gt;
&amp;lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/valine/1.5.1/Valine.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
    new Valine({
        // 请使用你自己的设置
        el: &apos;#vcomments&apos;,
        appId: &apos;&amp;lt;%- theme.valine.appId %&amp;gt;&apos;,
        appKey: &apos;&amp;lt;%- theme.valine.appKey %&amp;gt;&apos;,
        avatar: &apos;mp&apos;,
        path: window.location.pathname,
        serverURLs: &apos;&amp;lt;%- theme.valine.serverURLs %&amp;gt;&apos;,
        });
&amp;lt;/script&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从&lt;code&gt;themes\particlex\layout\post.ejs&lt;/code&gt;的倒数第三行开始加入以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% if (theme.valine.enable) { %&amp;gt;
&amp;lt;div id=&quot;comment&quot;&amp;gt;
    &amp;lt;div id=&quot;vcomments&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;themes\particlex\_config.yml&lt;/code&gt;加入Valine的配置项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Valine
valine:
    enable: true
    appId: # 你的appId
    appKey: # 你的appKey
    serverURLs: # 你的serverURLs
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以ParticleX为什么不支持Valine
高亮好像不支持ejs所以代码块上写的html&lt;/p&gt;
</content:encoded></item><item><title>Ubuntu配置Android SDK并使用Cordova</title><link>https://onaniishoujo.github.io/posts/ubuntu%E9%85%8D%E7%BD%AEandroid-sdk%E5%B9%B6%E4%BD%BF%E7%94%A8cordova/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/ubuntu%E9%85%8D%E7%BD%AEandroid-sdk%E5%B9%B6%E4%BD%BF%E7%94%A8cordova/</guid><pubDate>Sat, 06 Apr 2024 17:48:53 GMT</pubDate><content:encoded>&lt;p&gt;在Ubuntu 20.04.6 LTS上配置Android SDK，并使用Cordova打包Android App&lt;/p&gt;
&lt;p&gt;这里使用Github的Codespace&lt;/p&gt;
&lt;p&gt;&lt;s&gt;用Goorm IDE发现存储空间不够，在Codespace上又重装了一遍&lt;/s&gt;&lt;/p&gt;
&lt;h3&gt;配置Cordova&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo apt update
npm install cordova -g
npm update cordova -g
cordova create &amp;lt;文件夹名&amp;gt; &amp;lt;包名&amp;gt; &amp;lt;软件名&amp;gt;
cd &amp;lt;文件夹名&amp;gt;
cordova platform add android --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;预览命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova serve
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;配置JDK&lt;/h3&gt;
&lt;p&gt;Codespace自带JDK 21，但是好像有bug，JDK 17能正常使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openjdk-17-jdk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装JDK 17后需要设置JDK的环境变量，不然就是用的JDK 21的环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export JAVA_HOME=/usr/local/sdkman/candidates/java/17.0.10-ms  #jdk17的位置
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;配置Android SDK&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
unzip commandlinetools-linux-11076708_latest.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加环境变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;.bashrc&lt;/code&gt;中添加下面三行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export ANDROID_SDK_ROOT=/path/to/your/sdk  #你的sdk位置
export ANDROID_HOME=$ANDROID_SDK_ROOT
export PATH=$PATH:$ANDROID_SDK_ROOT/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新打开终端，输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sdkmanager &quot;platform-tools&quot; &quot;platforms;android-33&quot; &quot;build-tools;33.0.2&quot; --sdk_root=$ANDROID_SDK_ROOT
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;打包&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cordova build android
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;错误及解决方式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Error: LinkageError occurred while loading main class com.android.sdklib.tool.sdkmanager.SdkManagerCli        java.lang.UnsupportedClassVersionError: com/android/sdklib/tool/sdkmanager/SdkManagerCli has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sdkmanager &quot;build-tools;33.0.2&quot; --sdk_root=$ANDROID_SDK_ROOT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Could not open settings generic class cache for settings file &apos;/workspaces/android/app/platforms/android/settings.gradle&apos; (/home/codespace/.gradle/caches/7.6/scripts/dqjrgsw17c62wbpoagod92e1e). &amp;gt; BUG! exception in phase &apos;semantic analysis&apos; in source unit &apos;_BuildScript_&apos; Unsupported class file major version 65&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;$JAVA_HOME&lt;/code&gt;设置为JDK 17的目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Execution failed for task &apos;:app:mergeLibDexDebug&apos;. &amp;gt; Could not resolve all files for configuration &apos;:app:debugRuntimeClasspath&apos;.   &amp;gt; Failed to transform debug (project :CordovaLib) to match attributes {artifactType=android-dex, asm-transformed-variant=NONE, com.android.build.api.attributes.AgpVersionAttr=7.4.2, com.android.build.api.attributes.BuildTypeAttr=debug, com.android.build.gradle.internal.attributes.VariantAttr=debug, dexing-enable-desugaring=true, dexing-enable-jacoco-instrumentation=false, dexing-is-debuggable=true, dexing-min-sdk=24, org.gradle.libraryelements=classes, org.gradle.usage=java-runtime}.      &amp;gt; Execution failed for DexingNoClasspathTransform: /workspaces/android/app/platforms/android/CordovaLib/build/intermediates/runtime_library_classes_dir/debug.         &amp;gt; Error while dexing.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;&lt;s&gt;解决上面两个就没这个了&lt;/s&gt;&lt;/p&gt;
</content:encoded></item><item><title>Hello, World!</title><link>https://onaniishoujo.github.io/posts/hello-world/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/hello-world/</guid><pubDate>Wed, 30 Aug 2023 23:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;初音ミク16岁生日快乐！！！&lt;/h1&gt;
&lt;h1&gt;同时纪念少女的小站正式建成&lt;/h1&gt;
&lt;h1&gt;2023.08.31 00:00 (JST)&lt;/h1&gt;
&lt;p&gt;Hello, World!&lt;/p&gt;
</content:encoded></item><item><title>为Hexo Fluid的文章设置网格背景</title><link>https://onaniishoujo.github.io/posts/%E4%B8%BAhexo-fluid%E7%9A%84%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E7%BD%91%E6%A0%BC%E8%83%8C%E6%99%AF/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E4%B8%BAhexo-fluid%E7%9A%84%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E7%BD%91%E6%A0%BC%E8%83%8C%E6%99%AF/</guid><pubDate>Sat, 14 Oct 2023 21:23:35 GMT</pubDate><content:encoded>&lt;p&gt;效果图：
&lt;img src=&quot;./xiaoguo.png&quot; alt=&quot;效果图&quot; /&gt;
两种方法，推荐第一种&lt;/p&gt;
&lt;h2&gt;使用自定义CSS实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;代码是从&lt;a href=&quot;https://gridzzly.com&quot;&gt;Gridzzly.com&lt;/a&gt;抄的&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;推荐为暗色模式进行适配 &lt;s&gt;不然根本看不清&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;新建CSS文件(不要通过自定义CSS导入)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;#board {
    width: 100%;
    height: 100%;
    background-image: url(&quot;data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%226mm%22%20height%3D%226mm%22%20viewPort%3D%220%200%205mm%205mm%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%3Cline%20x1%3D%220mm%22%20y1%3D%225mm%22%20x2%3D%226mm%22%20y2%3D%225mm%22%20stroke-width%3D%220.3mm%22%20stroke%3D%22%23d4d4d4%22%2F%3E%20%3Cline%20x1%3D%225mm%22%20y1%3D%220mm%22%20x2%3D%225mm%22%20y2%3D%226mm%22%20stroke-width%3D%220.3mm%22%20stroke%3D%22%23d4d4d4%22%2F%3E%20%3C%2Fsvg%3E&quot;);
    background-position: 2px 2px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;引入CSS&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link id=&quot;custom-css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/divback.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建议通过Hexo注入器进行引入&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改&lt;code&gt;Blog\themes\fluid\layout\_partials\header\navigation.ejs&lt;/code&gt; 目前是第62行，为了给a标签绑定&lt;code&gt;onclick=&quot;toggleCSS()&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a class=&quot;nav-link&quot; target=&quot;_self&quot; href=&quot;javascript:;&quot; aria-label=&quot;Color Toggle&quot; onclick=&quot;toggleCSS()&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;导入自定义js&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;function toggleCSS() {
      var linkElement = document.getElementById(&quot;custom-css&quot;);
      if (linkElement.disabled) {
        linkElement.disabled = false; // 启用CSS文件
      } else {
        linkElement.disabled = true; // 禁用CSS文件
      }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;使用Pattern.css实现&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;layout.ejs&lt;/code&gt;引入&lt;code&gt;Pattern.css&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link href=&quot;https://unpkg.com/pattern.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;将&lt;code&gt;layout.ejs&lt;/code&gt;和&lt;code&gt;post.ejs&lt;/code&gt;两个文件中的&lt;code&gt;&amp;lt;div id=&quot;board&quot;&lt;/code&gt;(没有向右的尖括号)改为&lt;code&gt;&amp;lt;div id=&quot;board&quot; class=&quot;pattern-dots-xl&quot;&lt;/code&gt;(以.pattern-dots-xl为例，可以自己修改class的内容)&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>使用Cloudflare Pages搭建图床</title><link>https://onaniishoujo.github.io/posts/%E4%BD%BF%E7%94%A8cloudflare-pages%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E4%BD%BF%E7%94%A8cloudflare-pages%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</guid><pubDate>Thu, 08 Feb 2024 23:10:56 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;⚠️警告⚠️&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pages.dev&lt;/code&gt;域名被移动运营商污染，请谨慎使用！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code&gt;Cloudflare Pages&lt;/code&gt;搭建图床&lt;/p&gt;
&lt;p&gt;除了图床也可以放各种各样的文件&lt;/p&gt;
&lt;p&gt;限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最多100个&lt;code&gt;pages.dev&lt;/code&gt;域名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每月最多部署500次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个&lt;code&gt;Cloudflare Pages&lt;/code&gt;最多20000个文件，单个文件最大&lt;code&gt;25 MiB&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;使用方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建Git仓库，上传你的文件&lt;/p&gt;
&lt;p&gt;在仓库根目录中新建一个&lt;code&gt;_headers&lt;/code&gt;文件，内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
  Access-Control-Allow-Origin: *
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：最好把&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;中的&lt;code&gt;*&lt;/code&gt;替换为你的网站URL&lt;/p&gt;
&lt;p&gt;不替换就是所有人都能跨域访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建一个&lt;code&gt;Cloudflare Pages&lt;/code&gt;，选择上面仓库的某个分支并部署&lt;/p&gt;
&lt;p&gt;此时你就得到了一个图床&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>使用Github Actions自动切换网站主题</title><link>https://onaniishoujo.github.io/posts/%E4%BD%BF%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E7%BD%91%E7%AB%99%E4%B8%BB%E9%A2%98/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E4%BD%BF%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E7%BD%91%E7%AB%99%E4%B8%BB%E9%A2%98/</guid><pubDate>Sun, 21 Jan 2024 20:43:54 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;现在网站用了六套主题，周一用Diaspora，周二和周日用ShokaX，周三和周六用Particlex，周四用Stellaris，周五用Fluid，里站用Brewski，可喜可贺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code&gt;Github Actions&lt;/code&gt;实现每天自动切换网站的主题&lt;/p&gt;
&lt;p&gt;比如周一、三、五、七使用&lt;code&gt;theme-A&lt;/code&gt;，二、四、六使用&lt;code&gt;theme-B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然也可以添加&lt;code&gt;theme-C&lt;/code&gt;、&lt;code&gt;theme-D&lt;/code&gt;...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;用户名.github.io&lt;/code&gt;仓库中有两个文件夹&lt;code&gt;theme-A/&lt;/code&gt;和&lt;code&gt;theme-B/&lt;/code&gt;，用于存放两套主题的静态文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在GitHub的 Settings -&amp;gt; Developer Settings -&amp;gt; Personal access tokens -&amp;gt; Tokens (classic) (&lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;链接&lt;/a&gt;)生成一个token，填写Note，勾选&lt;code&gt;repo&lt;/code&gt;和&lt;code&gt;workflow&lt;/code&gt;然后生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./token.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在仓库的 Settings -&amp;gt; Secrets and variables -&amp;gt; Actions 添加刚才的token&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./secret.png&quot; alt=&quot;secret&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在GitHub仓库中新建&lt;code&gt;.github/workflows&lt;/code&gt;，新建一个&lt;code&gt;.yaml&lt;/code&gt;文件，文件名随意；可以先点&lt;code&gt;Run workflow&lt;/code&gt;把静态文件部署到&lt;code&gt;gh-pages&lt;/code&gt;分支&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;name: Update Blog

on:
  workflow_dispatch:
  schedule:
    - cron: &quot;0 2 * * *&quot;

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Deployment Directory
        id: determine_directory
        run: |
          day_of_week=$(date +&apos;%u&apos;)
          if [ $((day_of_week % 2)) -eq 0 ]; then
          echo &quot;::set-output name=directory::theme-B/&quot;
            else
          echo &quot;::set-output name=directory::theme-A/&quot;
          fi
          
      - name: Get Current Time
        id: current_time
        run: echo &quot;::set-output name=time::$(date +&apos;%Y-%m-%d %H:%M:%S&apos;)&quot;

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.9.3 # 使用部署到 GitHub pages 的 action
        with:
          publish_dir: ${{ steps.determine_directory.outputs.directory }} 
          github_token: ${{ secrets.DEPLOY_SECRET }} # secret 名
          user_name: ${{ secrets.MY_USER_NAME }}
          user_email: ${{ secrets.MY_USER_EMAIL }}
          commit_message: &quot;Automated Deployment at ${{ steps.current_time.outputs.time }}&quot; # 在 commit message 中添加当前时间
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;在仓库的 Settings -&amp;gt; Pages 设置&lt;code&gt;Build and deployment&lt;/code&gt;的&lt;code&gt;Source&lt;/code&gt;为&lt;code&gt;Deploy from a branch&lt;/code&gt;，选择&lt;code&gt;gh-pages&lt;/code&gt;分支，此时GitHub Pages将开始部署&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;s&gt;总之就挺神经病的&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;写的方法我自己都看不懂&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;感谢ChatGPT提供的GitHub Actions的源码&lt;/s&gt;&lt;/p&gt;
</content:encoded></item><item><title>如何使用Toga制作奇怪的安卓App</title><link>https://onaniishoujo.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8toga%E5%88%B6%E4%BD%9C%E5%A5%87%E6%80%AA%E7%9A%84%E5%AE%89%E5%8D%93app/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8toga%E5%88%B6%E4%BD%9C%E5%A5%87%E6%80%AA%E7%9A%84%E5%AE%89%E5%8D%93app/</guid><pubDate>Fri, 22 Mar 2024 21:03:52 GMT</pubDate><content:encoded>&lt;p&gt;使用Python的Toga框架，快速制作一些&quot;奇怪的&quot;安卓App&lt;/p&gt;
&lt;p&gt;&lt;s&gt;比如给某位幸运的同学做个 同城约*&lt;/s&gt;  &lt;s&gt;哈哈哈哈&lt;/s&gt;&lt;/p&gt;
&lt;h4&gt;安装框架&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;pip install briefcase
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;新建项目&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;briefcase new
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;编写代码&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;src&lt;/code&gt;目录中找到&lt;code&gt;app.py&lt;/code&gt;，这里给一个插入图片的示例，图片文件要放在&lt;code&gt;src/应用名/resources&lt;/code&gt;目录下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import toga
from toga.style import Pack
from toga.style.pack import COLUMN
from toga.images import Image

class MyApp(toga.App):
    def startup(self):
        main_box = toga.Box(style=Pack(direction=COLUMN))

        image = Image(&apos;./resources/hi.jpg&apos;)
        image_view = toga.ImageView(image, style=Pack(flex=1))
        main_box.add(image_view)

        self.main_window = toga.MainWindow(title=self.formal_name)
        self.main_window.content = main_box
        self.main_window.show()

def main():
    return MyApp()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;打包Apk&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;briefcase create android
briefcase build android
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这里会打包一个Apk，这个时候就可以安装了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;briefcase package android
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这个命令会生成一个&lt;code&gt;.aab&lt;/code&gt;文件，个人感觉没什么用&lt;/p&gt;
&lt;h4&gt;&lt;s&gt;发给某幸运儿&lt;/s&gt;&lt;/h4&gt;
&lt;p&gt;&lt;s&gt;然后就被骂了哈哈哈哈哈哈&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;这里还有一个展示html页面的代码，Windows11测试通过，安卓没试过&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import toga

class MyApp(toga.App):
    def startup(self):
        webview = toga.WebView()
        web=r&quot;&quot;&quot;&amp;lt;h1&amp;gt;这里放你的html内容&amp;lt;/h1&amp;gt;&quot;&quot;&quot;
        webview.set_content(&quot;example.com&quot;, web)

        self.main_window = toga.MainWindow(title=self.formal_name)
        self.main_window.content = webview
        self.main_window.show()

def main():
    return MyApp()
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>姐姐♡喜欢</title><link>https://onaniishoujo.github.io/posts/%E5%A7%90%E5%A7%90%E5%96%9C%E6%AC%A2/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E5%A7%90%E5%A7%90%E5%96%9C%E6%AC%A2/</guid><pubDate>Sun, 26 Nov 2023 12:46:21 GMT</pubDate><content:encoded>&lt;p&gt;好喜欢姐姐&lt;/p&gt;
&lt;p&gt;想给姐姐生孩子&lt;/p&gt;
&lt;p&gt;人家就是好喜欢被姐姐控制的感觉呜呜呜&lt;/p&gt;
</content:encoded></item><item><title>少女的人设</title><link>https://onaniishoujo.github.io/posts/%E5%B0%91%E5%A5%B3%E7%9A%84%E4%BA%BA%E8%AE%BE/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E5%B0%91%E5%A5%B3%E7%9A%84%E4%BA%BA%E8%AE%BE/</guid><pubDate>Sun, 05 Nov 2023 16:07:34 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;姓名: 少女&lt;/li&gt;
&lt;li&gt;性别: 女&lt;/li&gt;
&lt;li&gt;年龄: 16&lt;/li&gt;
&lt;li&gt;身高: 159.5cm&lt;/li&gt;
&lt;li&gt;体重: &amp;lt;span class=&quot;heimu&quot;&amp;gt;女孩子的体重是秘密!!&amp;lt;/span&amp;gt;&lt;/li&gt;
&lt;li&gt;胸围: 95D&lt;/li&gt;
&lt;li&gt;生日: 2007.08.31&lt;/li&gt;
&lt;li&gt;喜欢的人/物: 初音未来&amp;amp;&amp;amp;美少女&amp;amp;&amp;amp;Python&lt;br /&gt;
&amp;lt;div style=&quot;text-align:center;&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;del&amp;gt;才，才不是为了你才特意写的自我介绍啦&amp;lt;/del&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;世界第一可爱美少女&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>想穿Lolita</title><link>https://onaniishoujo.github.io/posts/%E6%83%B3%E7%A9%BFlolita/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E6%83%B3%E7%A9%BFlolita/</guid><pubDate>Thu, 26 Oct 2023 22:23:17 GMT</pubDate><content:encoded>&lt;p&gt;我想穿lolita&lt;br /&gt;
但是lolita好贵 买不起&lt;/p&gt;
&lt;p&gt;我不穿lolita也很可爱&lt;/p&gt;
</content:encoded></item><item><title>我想变成女生</title><link>https://onaniishoujo.github.io/posts/%E6%88%91%E6%83%B3%E5%8F%98%E6%88%90%E5%A5%B3%E7%94%9F/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E6%88%91%E6%83%B3%E5%8F%98%E6%88%90%E5%A5%B3%E7%94%9F/</guid><pubDate>Thu, 05 Oct 2023 20:06:23 GMT</pubDate><content:encoded>&lt;h1&gt;我想变成女生&lt;/h1&gt;
&lt;p&gt;好想变成女生&lt;/p&gt;
&lt;p&gt;变成女生会很可爱&lt;/p&gt;
&lt;p&gt;为什么我不是女生，可恶&lt;/p&gt;
</content:encoded></item><item><title>生日快乐</title><link>https://onaniishoujo.github.io/posts/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</guid><pubDate>Fri, 15 Dec 2023 21:48:38 GMT</pubDate><content:encoded>&lt;p&gt;生日快乐，我的15岁&lt;/p&gt;
&lt;p&gt;许个愿——当然不能说出来啦！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;12/15/2023&lt;/code&gt;&lt;/p&gt;
</content:encoded></item><item><title>谁能帮我找个女朋友</title><link>https://onaniishoujo.github.io/posts/%E8%B0%81%E8%83%BD%E5%B8%AE%E6%88%91%E6%89%BE%E4%B8%AA%E5%A5%B3%E6%9C%8B%E5%8F%8B/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E8%B0%81%E8%83%BD%E5%B8%AE%E6%88%91%E6%89%BE%E4%B8%AA%E5%A5%B3%E6%9C%8B%E5%8F%8B/</guid><pubDate>Sat, 14 Oct 2023 22:13:19 GMT</pubDate><content:encoded>&lt;p&gt;谁能帮我找个女朋友&lt;br /&gt;
要高中大姐姐&lt;/p&gt;
</content:encoded></item><item><title>魔改Hexo Fluid</title><link>https://onaniishoujo.github.io/posts/%E9%AD%94%E6%94%B9hexo-fluid/</link><guid isPermaLink="true">https://onaniishoujo.github.io/posts/%E9%AD%94%E6%94%B9hexo-fluid/</guid><pubDate>Thu, 05 Oct 2023 20:23:53 GMT</pubDate><content:encoded>&lt;p&gt;整理一下本少女在使用hexo fluid时用到的代码&lt;/p&gt;
&lt;h2&gt;视频Banner&lt;/h2&gt;
&lt;p&gt;将&lt;code&gt;themes/fluid/layout/_partials/header/banner.ejs&lt;/code&gt;修改为以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%
var banner_img = page.banner_img || theme.index.banner_img
var banner_img_height = parseFloat(page.banner_img_height || theme.index.banner_img_height)
var banner_mask_alpha = parseFloat(page.banner_mask_alpha || theme.index.banner_mask_alpha)
var subtitle = page.subtitle || page.title
%&amp;gt;

&amp;lt;div id=&quot;banner&quot; class=&quot;banner&quot; style=&quot;background: url(&apos;&amp;lt;%- url_for(banner_img) %&amp;gt;&apos;) no-repeat center center; background-size: cover;&quot;&amp;gt;
  &amp;lt;video autoplay loop muted playsinline poster=&quot;&amp;lt;%- url_for(banner_img) %&amp;gt;&quot;
         style=&quot;position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;&quot;&amp;gt;
    &amp;lt;source src=&quot;[你的视频背景地址]&quot; type=&quot;video/mp4&quot;&amp;gt;
  &amp;lt;/video&amp;gt;
  &amp;lt;div class=&quot;full-bg-img&quot;&amp;gt;
    &amp;lt;div class=&quot;mask flex-center&quot; style=&quot;background-color: rgba(0, 0, 0, &amp;lt;%= parseFloat(banner_mask_alpha) %&amp;gt;)&quot;&amp;gt;
      &amp;lt;div class=&quot;banner-text text-center fade-in-up&quot;&amp;gt;
        &amp;lt;div class=&quot;h2&quot;&amp;gt;
          &amp;lt;% if(theme.fun_features.typing.enable &amp;amp;&amp;amp; in_scope(theme.fun_features.typing.scope)) { %&amp;gt;
            &amp;lt;span id=&quot;subtitle&quot; data-typed-text=&quot;&amp;lt;%= subtitle %&amp;gt;&quot;&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;% } else { %&amp;gt;
            &amp;lt;span id=&quot;subtitle&quot;&amp;gt;&amp;lt;%- subtitle %&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;% } %&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;% if (is_post()) { %&amp;gt;
          &amp;lt;%- inject_point(&apos;postMetaTop&apos;) %&amp;gt;
        &amp;lt;% } %&amp;gt;
      &amp;lt;/div&amp;gt;

      &amp;lt;% if (theme.scroll_down_arrow.enable &amp;amp;&amp;amp; theme.scroll_down_arrow.banner_height_limit &amp;lt;= banner_img_height &amp;amp;&amp;amp; page.layout !== &apos;404&apos;) { %&amp;gt;
        &amp;lt;div class=&quot;scroll-down-bar&quot;&amp;gt;
          &amp;lt;i class=&quot;iconfont icon-arrowdown&quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;% } %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;添加自定义字体&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过自定义CSS引入字体&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
  font-family: &apos;FontName&apos;;  /*换成你自己的字体名及路径*/
  src: url(&apos;/font/font.ttf&apos;) format(&apos;truetype&apos;);
  font-weight: normal;
  font-style: normal;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;修改&lt;code&gt;Blog/_config.fluid.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;font:
  font_size: 18px   # 按需要自定义
  font_family: FontName  # 换成你自己的字体名
  letter_spacing: 0.02em
  code_font_size: 85%
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;添加网页背景图片&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用自定义CSS实现&lt;br /&gt;
用上面的方法添加自定义CSS&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;body {
  background: url(/img/background.jpg);  /*换成你自己的背景图*/
  background-attachment: fixed;
  background-size: cover;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以使用图片的api，个人感觉会拖慢加载速度&lt;/p&gt;
&lt;h2&gt;复制变色&lt;/h2&gt;
&lt;p&gt;自定义CSS添加以下内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::selection {
    color: #66ccff; /* 设置选中文字的颜色 */
    background: transparent; /* 设置选中文字的背景为透明 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Banner图随网页滑动变透明&lt;/h2&gt;
&lt;p&gt;Hexo Fluid，随着网页的滑动，Banner图会逐渐变透明&lt;br /&gt;
打字机也会变透明&lt;/p&gt;
&lt;p&gt;自定义js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 获取图片元素
var image = document.getElementById(&quot;banner&quot;);
var targetDistance = 695; // 设置滑动695px后完全透明
window.addEventListener(&quot;scroll&quot;, function() {
  var scrollDistance = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
  var opacity = 1 - (scrollDistance / targetDistance);
  if(opacity &amp;lt; 0) {
    opacity = 0;
  }
  image.style.opacity = opacity.toString();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者根据滑动网页的百分比减少不透明度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var image = document.getElementById(&quot;banner&quot;);
var pageHeight = document.body.scrollHeight - window.innerHeight;
window.addEventListener(&quot;scroll&quot;, function() {
  var scrollDistance = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
  var opacity = 1 - (scrollDistance / pageHeight);
  if(opacity &amp;lt; 0) {
    opacity = 0;
  } else if(opacity &amp;gt; 1) {
    opacity = 1;
  }
  image.style.opacity = opacity.toString();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置banner的淡出样式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#banner {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;文章中代码的字体及背景色&lt;/h2&gt;
&lt;p&gt;自定义CSS添加以下内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.markdown-body code {
    tab-size: 4;
    background-color: rgb(251 253 83 / 50%);
    transition: background-color 0.2s ease-in-out;
    font-family: &quot;FontName&quot;;  /*改为你自己的字体名*/
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;background-color&lt;/code&gt;用于设置背景色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-family&lt;/code&gt;用于设置字体&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;滚动条&lt;/h2&gt;
&lt;p&gt;自定义CSS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::-webkit-scrollbar {
    width: 10px;
    height: 10px;
}

::-webkit-scrollbar-thumb {
    background-color: #e58a8a;
    background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent);
    border-radius: 2em;
}

::-webkit-scrollbar-corner {
    background-color: transparent;
}

::-moz-selection {
    color: #fff;
    background-color: #e58a8a;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;关于Hexo Fluid的评论&lt;/h2&gt;
&lt;p&gt;因为出了一点Bug，本站的评论通过修改&lt;code&gt;Blog/themes/fluid/layout/post.ejs&lt;/code&gt;实现。&lt;br /&gt;
将&lt;code&gt;post.ejs&lt;/code&gt;中的&lt;code&gt;&amp;lt;%- inject_point(&apos;postComments&apos;) %&amp;gt;&lt;/code&gt;替换为 你使用的评论系统 提供的html代码&lt;br /&gt;
以Utterance为例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;https://utteranc.es/client.js&quot;
        repo=&quot;用户名/仓库地址&quot;
        issue-term=&quot;pathname&quot;
        theme=&quot;github-light&quot;
        crossorigin=&quot;anonymous&quot;
        async&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;关于网站图标&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;_config.fluid.yml&lt;/code&gt;设置没反应，手动将网页图标重命名为&lt;code&gt;favicon.ico&lt;/code&gt;，复制到&lt;code&gt;public&lt;/code&gt;文件夹下&lt;/p&gt;
&lt;h2&gt;关于Valine&lt;/h2&gt;
&lt;p&gt;测试时发现LeanCloud提供的域名会屏蔽中国大陆的访问...&lt;br /&gt;
绑定自己的域名后就能正常访问...&lt;/p&gt;
&lt;p&gt;在LeanCloud的&lt;code&gt;设置-域名绑定&lt;/code&gt;选项绑定自己的子域名，然后在子域名的DNS上设置&lt;code&gt;CNAME&lt;/code&gt;记录，解析到LeanCloud提供的域名，之后配置Valine时,使用绑定的子域名&lt;/p&gt;
&lt;p&gt;&lt;s&gt;不想打字了&lt;/s&gt;&lt;/p&gt;
</content:encoded></item></channel></rss>